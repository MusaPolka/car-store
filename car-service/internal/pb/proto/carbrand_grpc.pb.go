// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/carbrand.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CarBrandService_GetCarBrand_FullMethodName    = "/carbrand.CarBrandService/GetCarBrand"
	CarBrandService_ListCarBrands_FullMethodName  = "/carbrand.CarBrandService/ListCarBrands"
	CarBrandService_CreateCarBrand_FullMethodName = "/carbrand.CarBrandService/CreateCarBrand"
	CarBrandService_UpdateCarBrand_FullMethodName = "/carbrand.CarBrandService/UpdateCarBrand"
	CarBrandService_DeleteCarBrand_FullMethodName = "/carbrand.CarBrandService/DeleteCarBrand"
)

// CarBrandServiceClient is the client API for CarBrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Example service and message
type CarBrandServiceClient interface {
	GetCarBrand(ctx context.Context, in *GetCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error)
	ListCarBrands(ctx context.Context, in *ListCarBrandsRequest, opts ...grpc.CallOption) (*ListCarBrandsResponse, error)
	CreateCarBrand(ctx context.Context, in *CreateCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error)
	UpdateCarBrand(ctx context.Context, in *UpdateCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error)
	DeleteCarBrand(ctx context.Context, in *DeleteCarBrandRequest, opts ...grpc.CallOption) (*DeleteCarBrandResponse, error)
}

type carBrandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarBrandServiceClient(cc grpc.ClientConnInterface) CarBrandServiceClient {
	return &carBrandServiceClient{cc}
}

func (c *carBrandServiceClient) GetCarBrand(ctx context.Context, in *GetCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarBrand)
	err := c.cc.Invoke(ctx, CarBrandService_GetCarBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carBrandServiceClient) ListCarBrands(ctx context.Context, in *ListCarBrandsRequest, opts ...grpc.CallOption) (*ListCarBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCarBrandsResponse)
	err := c.cc.Invoke(ctx, CarBrandService_ListCarBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carBrandServiceClient) CreateCarBrand(ctx context.Context, in *CreateCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarBrand)
	err := c.cc.Invoke(ctx, CarBrandService_CreateCarBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carBrandServiceClient) UpdateCarBrand(ctx context.Context, in *UpdateCarBrandRequest, opts ...grpc.CallOption) (*CarBrand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarBrand)
	err := c.cc.Invoke(ctx, CarBrandService_UpdateCarBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carBrandServiceClient) DeleteCarBrand(ctx context.Context, in *DeleteCarBrandRequest, opts ...grpc.CallOption) (*DeleteCarBrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCarBrandResponse)
	err := c.cc.Invoke(ctx, CarBrandService_DeleteCarBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarBrandServiceServer is the server API for CarBrandService service.
// All implementations must embed UnimplementedCarBrandServiceServer
// for forward compatibility.
//
// Example service and message
type CarBrandServiceServer interface {
	GetCarBrand(context.Context, *GetCarBrandRequest) (*CarBrand, error)
	ListCarBrands(context.Context, *ListCarBrandsRequest) (*ListCarBrandsResponse, error)
	CreateCarBrand(context.Context, *CreateCarBrandRequest) (*CarBrand, error)
	UpdateCarBrand(context.Context, *UpdateCarBrandRequest) (*CarBrand, error)
	DeleteCarBrand(context.Context, *DeleteCarBrandRequest) (*DeleteCarBrandResponse, error)
	mustEmbedUnimplementedCarBrandServiceServer()
}

// UnimplementedCarBrandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCarBrandServiceServer struct{}

func (UnimplementedCarBrandServiceServer) GetCarBrand(context.Context, *GetCarBrandRequest) (*CarBrand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarBrand not implemented")
}
func (UnimplementedCarBrandServiceServer) ListCarBrands(context.Context, *ListCarBrandsRequest) (*ListCarBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarBrands not implemented")
}
func (UnimplementedCarBrandServiceServer) CreateCarBrand(context.Context, *CreateCarBrandRequest) (*CarBrand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarBrand not implemented")
}
func (UnimplementedCarBrandServiceServer) UpdateCarBrand(context.Context, *UpdateCarBrandRequest) (*CarBrand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarBrand not implemented")
}
func (UnimplementedCarBrandServiceServer) DeleteCarBrand(context.Context, *DeleteCarBrandRequest) (*DeleteCarBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarBrand not implemented")
}
func (UnimplementedCarBrandServiceServer) mustEmbedUnimplementedCarBrandServiceServer() {}
func (UnimplementedCarBrandServiceServer) testEmbeddedByValue()                         {}

// UnsafeCarBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarBrandServiceServer will
// result in compilation errors.
type UnsafeCarBrandServiceServer interface {
	mustEmbedUnimplementedCarBrandServiceServer()
}

func RegisterCarBrandServiceServer(s grpc.ServiceRegistrar, srv CarBrandServiceServer) {
	// If the following call pancis, it indicates UnimplementedCarBrandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CarBrandService_ServiceDesc, srv)
}

func _CarBrandService_GetCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarBrandServiceServer).GetCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarBrandService_GetCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarBrandServiceServer).GetCarBrand(ctx, req.(*GetCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarBrandService_ListCarBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarBrandServiceServer).ListCarBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarBrandService_ListCarBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarBrandServiceServer).ListCarBrands(ctx, req.(*ListCarBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarBrandService_CreateCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarBrandServiceServer).CreateCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarBrandService_CreateCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarBrandServiceServer).CreateCarBrand(ctx, req.(*CreateCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarBrandService_UpdateCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarBrandServiceServer).UpdateCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarBrandService_UpdateCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarBrandServiceServer).UpdateCarBrand(ctx, req.(*UpdateCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarBrandService_DeleteCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarBrandServiceServer).DeleteCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarBrandService_DeleteCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarBrandServiceServer).DeleteCarBrand(ctx, req.(*DeleteCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarBrandService_ServiceDesc is the grpc.ServiceDesc for CarBrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarBrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carbrand.CarBrandService",
	HandlerType: (*CarBrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarBrand",
			Handler:    _CarBrandService_GetCarBrand_Handler,
		},
		{
			MethodName: "ListCarBrands",
			Handler:    _CarBrandService_ListCarBrands_Handler,
		},
		{
			MethodName: "CreateCarBrand",
			Handler:    _CarBrandService_CreateCarBrand_Handler,
		},
		{
			MethodName: "UpdateCarBrand",
			Handler:    _CarBrandService_UpdateCarBrand_Handler,
		},
		{
			MethodName: "DeleteCarBrand",
			Handler:    _CarBrandService_DeleteCarBrand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/carbrand.proto",
}
